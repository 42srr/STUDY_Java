# 목표
- 스트림이란 무엇인가?
- 컬렉션과 스터림
- 내부 반복과 외부 반복
- 중간 연산과 최종 연산

## 4.1 스트림이란 무엇인가?
스트림은 자바 8API에 새로 추가된 기능이다.

선언형(즉, 데이터를 처리하는 임시 구현 코드 대신 질의로 표현할 수 있다)으로 컬렉션 데이터를 처리할 수 있다.

스트림을 이용하면 멀티스레드 코드를 구현하지 않아도 데이터를 투명하게 병렬로 처리할 수 있다.

- 자바 7
```java
List<Dish> lowCaloricDishes = new ArrayList<>();

누적자 요소로 필터링
for(Dish dish : menu) {
	if(dish.getCalories() < 400) {
		lowCaloricDishes.add(dish);
	}
}

익명 클래스로 요리 정렬
Collections.sort(lowCaloricDishes, new Comparator<Dish>() {
	public int compare(Dish dish1, Dish dish2) {
		return Integer.compare(dish1.getCalories(), dish2.getColories());
	}
});

List<String> lowCaloricDishesName = new ArrayList<>();
for(Dish dish: lowCaloricDishes) {
	lowCaloricDisehsName.add(dish.getName());
}

```

위 코드에서는 lowCaloricDishes라는 가비지 변수를 사용했다.
	- 컨테이너 역할만 하는 중간 변수

- 자바8
```java
import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;

List<String> lowCaloricDishesName = 
	menu.stream()
	.filter(d -> d.getCaloreis() < 400)    400칼로리 이하의 요리 선택
	.sorted(comparing(Dish::getCalories))  칼로리로 요리 정렬
	.map(Dish::getName)    요리명 추출
	.collect(toList());    모든 요리명을 리스트에 저장
```

stream() -> parallelStream()으로 변경하면 이 코드를 멀티코어 아키텍처에서 병렬로 실행할 수 있다.
```java
import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;

List<String> lowCaloricDishesName = 
	menu.parallelStream()
	.filter(d -> d.getCaloreis() < 400)    400칼로리 이하의 요리 선택
	.sorted(comparing(Dish::getCalories))  칼로리로 요리 정렬
	.map(Dish::getName)    요리명 추출
	.collect(toList());    모든 요리명을 리스트에 저장
```

소프트웨어 공학적 이득
- 선언형으로 코드를 구현할 수 있다.
	- 제어 블록(if, for) 을 사용하지 않고 동작의 수행만을 지정할 수 있다.
- filter, sorted, map, collect 같은 여러 빌딩 블록 연산을 연결해 복잡한 데이터 처리 파이프 라인을 만들 수 있다.
	- 해당 연산은 고수준 빌딩 블록으로 이루어져 있어, 특정 스레딩 모델에 재한되지 않고 자유롭게 어떤 상황에서든 사용할 수 있다.

결과적으로 우리는 데이터 처리 과정을 병렬화하면서 스레드와 락을 걱정할 필요가 없다.
-> 왜? 스트림 API 덕분에

![[자바_스트림 파이프라인|5000]]
스트림 API는 매우 비싼 연산이다.
```java
Map<Dish.Type, List<Dish>> dishesByType =
	menu.stream().collect(groupingBy(Dish::getType));

{
	FISH=[prawns, salmon],
	OTHER=[french fries, rice, season fruit, pizza],
	MEAT=[pork, beef, chicken]
}
```

## 4.2 스트림 시작하기
스트림이란?
- 데이터 처리 연산을 지원하도록 소스에서 추출된 연속된 요소

- 연속된 요소
스트림은 특정 요소 형식으로 이루어진 연속된 값집합의 인터페이스를 제공한다.
컬렉션은 자료구조 이므로 시간과 공간의 복잡성과 관련된 요소 저장 및 접근 연산이 주
스트림은 filter, sorted 처럼 표현 계산식이 주

컬렉션의 주제는 데이터고 스트림의 주제는 계산이다.

- 소스
스트림은 컬렉션, 배열, I/O 자원 등의 데이터 제공 소스로부터 데이터를 소비한다.
정렬된 컬렉션으로 스트림을 생성하면 정렬이 그대로 유지된다.

- 데이터 처리 연산
스트림은 함수형 프로그래밍 언어에서 일반적으로 지원하는 연산과 DB와 비슷한 연산을 지원한다.

- 파이프라이닝
스트림 연산끼리 연결해서 커다란 파이프 라인을 구성할 수 있도록 스트림 자신을 반환한다.
-> Laziness, short-circuiting 같은 최적화도 얻을 수 있다.
데이터 소스에 적용하는 DB 질의와 비슷하다.

- 내부 반복
반복자를 이용해서 명시적으로 반복하는 컬렉션과 달리 스트림은 내부 반복을 지원한다.

- filter
람다를 인수로 받아 스트림에서 특정 요소를 제외시킨다.
`d -> d.getCalories() > 300`

- map
람다를 이용해서 한 요소를 다른 요소로 변환하거나 정보를 추출
`map(Dish::getName), map(d -> d.getName())`

- limit
정해진 개수 이상의 요소가 스트림에 저장되지 못하게 스트림 크기를 축소 truncate한다.

- collect
스트림을 다른 형식으로 변환한다.

## 4.3 스트림과 컬렉션
자바의 기존 컬렉션과 새로운 스트림 모두 연속된 요소 형식의 값을 저장하는 자료구조의 인터페이스를 제공한다.
연속된(sequenced)는 순서와 상관없이 아무 값에나 접속하는 것이 아니라 순차적으로 값에 접근한다는 것을 의미한다.

### 컬렉션 vs 스트림

시각적 차이
- dvd : 컬렉션 (데이터를 담고 있음)
- 스트리밍 : 스트림(실시간 데이터 처리)

데이터를 언제 계산하느냐가 컬렉션과 스트림의 가장 큰 차이다.
컬렉션 : 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조.
		즉, 모든 요소는 컬렉션에 추가되기 전에 계산되어야 한다.
스트림 : 이론적으로 요청할 때만 요소를 계산하는 고정된 자료구조 (스트림에 요소를 추가하거나 제거할 수 없다.)

결과적으로
스트림 : 생산자, 소비자관계를 형성한다. 게으른 생성(필요할 때만 값을 계산한다.)
컬렉션 : 적극적 생성 (모든 값을 계산할 때까지 기다린다.)

### 4.3.1 딱 한번만 탐색할 수 있다
반복자와 마찬가지로 스트림도 한 번만 탐색할 수 있다.
즉, 탐색된 스트림의 요소는 소비된다.

반복자와 마찬가지로 한 번 탐색한 요소를 다시 탐색하려면 초기 데이터 소스에서 새로운 스트림을 만들어야 한다.

### 4.3.2 외부 반복과 내부 반복
컬렉션 인터페이스를 사용하려면 사용자가 직접 요소를 반복해야 한다. 이를 외부 반복이라고 한다.
반면 스트림 라이브러리는 내부 반복(알아서 처리)를 사용한다.


